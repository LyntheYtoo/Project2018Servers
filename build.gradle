//gradle plugins for this project
plugins 
{
    id 'java'
    id 'eclipse'
}

//variables for gradle script
ext 
{
    _javaVersion = '1.8'
    _mainClassName = 'node.NodeControlCore'
}

sourceCompatibility = _javaVersion
targetCompatibility = _javaVersion

repositories 
{
    mavenCentral()
    jcenter()
}

//libs for this project
dependencies 
{
	//Jpcap libs
	// https://mvnrepository.com/artifact/jpcap/jpcap
	compile group: 'jpcap', name: 'jpcap', version: '0.1.18-002'

    compile project(':nodeControlServer')
}

task moveres(type: Copy){
    from "./nodeControlServer/extResource/"
    into "${buildDir}/libs/extResource/"
    
    doLast
    {
        println "------------------------------------------------"
        println "resource moved."
        println "------------------------------------------------"
    }
}

task moveResult(type: Copy){
    onlyIf
    {
        projects.hasProperty 'mainClass'
        from "${buildDir}/libs/"
        into "${buildDir}/libs/test/" + mainClass + "/"
    }
    doLast
    {
        println "------------------------------------------------"
        println "build complete. output dir is :"
        println "${buildDir}/libs/test/" + mainClass + "/"
        println "------------------------------------------------"
    }
}

task deleteJunk(type: Delete) {
    onlyIf
    {
        projects.hasProperty 'mainClass'
        delete "${buildDir}/libs/test/" + mainClass + "/test/"
        followSymlinks = true
    }
}

task buildtest(type: Jar, dependsOn: ':build'){
    onlyIf
    {
        projects.hasProperty 'mainClass'
        manifest
        {
            attributes 'Main-Class': mainClass
        }
        from 
        {
            configurations.compile.collect 
            {
                it.isDirectory() ? it : zipTree(it)
            }
        }
    }
    
    doLast
    {
        println "------------------------------------------------"
        println "making Jar file..."
        println "mainClass is '" + mainClass + "'"
        println "------------------------------------------------"
    }
}

//buildtest.finalizedBy moveres
buildtest.finalizedBy moveResult
moveResult.finalizedBy deleteJunk
//build.finalizedBy moveres


jar
{
    manifest
    {
        attributes 'Main-Class': _mainClassName
    }
    from 
    {
        configurations.compile.collect 
        {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'
tasks.withType(JavaCompile) 
{
    options.encoding = 'UTF-8'
}
javadoc 
{
    options.encoding = 'UTF-8'
}
